/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Buyer;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import Repository.MongoDBConnection;
import Service.ButtonRenderer;
import Service.CartButtonEditor;
import UI.MainJFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.JButton;
import java.awt.Component;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.AbstractCellEditor;
import javax.swing.JCheckBox;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author Shari
 */
public class Products extends javax.swing.JPanel {

    MainJFrame mainpage;

    /**
     * Creates new form Products
     */
    public Products(MainJFrame mainpage) {
        initComponents();
        this.mainpage = mainpage;
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{"Product ID", "Product Name", "Price", "Eco Score", "Seller Name", "Add to Cart"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 5;  // Only "Add to Cart" button editable
            }
        });

        populateTable();
        populateSupplierComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        lblTitleProd = new javax.swing.JLabel();
        BackBTN = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearchProduct = new javax.swing.JButton();
        lblSupplier = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Price", "Quantity", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Buyer Dashboard");

        lblTitleProd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitleProd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleProd.setText("Product Page");

        BackBTN.setText("Back");
        BackBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBTNActionPerformed(evt);
            }
        });

        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });

        lblSupplier.setText("Supplier:");

        cmbSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(lblTitleProd, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BackBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(41, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(153, 153, 153)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchProduct)))))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(lblTitleProd, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BackBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBTNActionPerformed
        // TODO add your handling code here:
        mainpage.setContentPane(new BuyerSplitPage(mainpage));
        mainpage.invalidate();
        mainpage.validate();
    }//GEN-LAST:event_BackBTNActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed

        String searchTerm = txtSearch.getText().trim().toLowerCase();

        if (searchTerm.isEmpty()) {
            populateTable(); // Show all products if search is empty
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows

        MongoDatabase db = MongoDBConnection.getDatabase();
        MongoCollection<Document> productCollection = db.getCollection("products");
        MongoCollection<Document> userCollection = db.getCollection("users");

        for (Document doc : productCollection.find(new Document("is_audit", true))) {
            String productName = doc.getString("product_name");
            if (productName != null && productName.toLowerCase().contains(searchTerm)) {
                double price = doc.getDouble("price");
                String productId  =doc.getString("product_id");
                String sellerId = doc.getString("seller_id");
                Integer ecoScore = doc.getInteger("ecoscore");

                Document seller = userCollection.find(new Document("user_id", sellerId)).first();
                String sellerName = seller != null ? seller.getString("name") : "Unknown";

                model.addRow(new Object[]{
                    productId, 
                    productName,
                    price,
                    ecoScore,
                    sellerName,
                    "Add to Cart"
                });
            }
        }

        // Re-apply button renderer/editor
        TableColumn cartColumn = jTable1.getColumn("Add to Cart");
        cartColumn.setCellRenderer(new ButtonRenderer());
        cartColumn.setCellEditor(new CartButtonEditor(new JCheckBox(), jTable1));
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void cmbSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierActionPerformed
        // TODO add your handling code here:
        String selectedSeller = cmbSupplier.getSelectedItem().toString();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear table

        MongoDatabase db = MongoDBConnection.getDatabase();
        MongoCollection<Document> productCollection = db.getCollection("products");
        MongoCollection<Document> userCollection = db.getCollection("users");

        for (Document product : productCollection.find(new Document("is_audit", true))) {
            String sellerId = product.getString("seller_id");
            Document seller = userCollection.find(new Document("user_id", sellerId)).first();
            String sellerName = seller != null ? seller.getString("name") : "Unknown";

            if (selectedSeller.equals("All Suppliers") || sellerName.equals(selectedSeller)) {
                model.addRow(new Object[]{
                    product.getString("product_id"),
                    product.getString("product_name"),
                    product.getDouble("price"),
                    product.getInteger("ecoscore"),
                    sellerName,
                    "Add to Cart"
                });
            }
        }

        // Restore renderer and editor
        TableColumn cartColumn = jTable1.getColumn("Add to Cart");
        cartColumn.setCellRenderer(new ButtonRenderer());
        cartColumn.setCellEditor(new CartButtonEditor(new JCheckBox(), jTable1));
    }//GEN-LAST:event_cmbSupplierActionPerformed

    private void populateSupplierComboBox() {
        cmbSupplier.removeAllItems();
        cmbSupplier.addItem("All Suppliers"); // default option

        MongoDatabase db = MongoDBConnection.getDatabase();
        MongoCollection<Document> productCollection = db.getCollection("products");
        MongoCollection<Document> userCollection = db.getCollection("users");

        Set<String> sellerNames = new HashSet<>();

        for (Document product : productCollection.find(new Document("is_audit", true))) {
            String sellerId = product.getString("seller_id");

            if (sellerId != null) {
                Document seller = userCollection.find(new Document("user_id", sellerId)).first();
                if (seller != null) {
                    String sellerName = seller.getString("name");
                    if (sellerName != null && !sellerNames.contains(sellerName)) {
                        sellerNames.add(sellerName);
                        cmbSupplier.addItem(sellerName);
                    }
                }
            }
        }
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        MongoDatabase db = MongoDBConnection.getDatabase();
        MongoCollection<Document> productCollection = db.getCollection("products");
        MongoCollection<Document> userCollection = db.getCollection("users");

        for (Document doc : productCollection.find(new Document("is_audit", true))) {
            String productId  =doc.getString("product_id");
            String productName = doc.getString("product_name");
            double price = doc.getDouble("price");
            String sellerId = doc.getString("seller_id");
            Integer ecoScore = doc.getInteger("ecoscore");
            Document seller = userCollection.find(new Document("user_id", sellerId)).first();
            String sellerName = seller != null ? seller.getString("name") : "Unknown";

            model.addRow(new Object[]{
                productId,
                productName,
                price,
                ecoScore,
                sellerName,
                "Add to Cart"
            });
        }

        TableColumn cartColumn = jTable1.getColumn("Add to Cart");
        cartColumn.setCellRenderer(new ButtonRenderer());
        cartColumn.setCellEditor(new CartButtonEditor(new JCheckBox(), jTable1));
        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(0).setWidth(0);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBTN;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblSupplier;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitleProd;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
