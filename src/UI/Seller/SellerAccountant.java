/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Seller;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import Repository.MongoDBConnection;
import UI.MainJFrame;
import org.bson.types.ObjectId;

/**
 *
 * @author Shari
 */
public class SellerAccountant extends javax.swing.JPanel {

    /**
     * Creates new form SellerAccountant
     */
    private String accountantUserId;

    public SellerAccountant(MainJFrame mainpage) {
        initComponents();
        this.accountantUserId = mainpage.userId;
        loadUnpaidShippingInvoices();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Transportation Cost Dashboard");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Order Id", "Distance Travelled", "invoice Amount", "parcel Size", "parcel Weight", "Payment Mode", "status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Pay");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 63, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MongoDatabase db = MongoDBConnection.getDatabase();
        MongoCollection<Document> financials = db.getCollection("ShippingFinancials");

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to pay.");
            return;
        }

        // Get the internal MongoDB _id from a hidden column or stored value
        ObjectId documentId = (ObjectId) model.getValueAt(selectedRow, 0);  // Assuming _id is at column 0 and stored as ObjectId

        String paymentMode = model.getValueAt(selectedRow, 5).toString();
        String status = model.getValueAt(selectedRow, 6).toString();

        if (!status.equals("Paid")) {
            JOptionPane.showMessageDialog(this, "Please mark the status as 'Paid' before submitting payment.");
            return;
        }

        Document update = new Document("$set", new Document("payment_mode", paymentMode).append("status", status));

        financials.updateOne(new Document("_id", documentId), update);

        JOptionPane.showMessageDialog(this, "âœ… Payment status updated!");

        loadUnpaidShippingInvoices(); // Refresh table
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadUnpaidShippingInvoices() {
        MongoDatabase db = MongoDBConnection.getDatabase();
        MongoCollection<Document> financials = db.getCollection("ShippingFinancials");
        MongoCollection<Document> users = db.getCollection("users");

        // Get seller ID for this accountant
        Document userDoc = users.find(new Document("user_id", accountantUserId).append("is_active", true)).first();
        if (userDoc == null || !userDoc.containsKey("parent_seller_id")) {
            JOptionPane.showMessageDialog(this, "Seller ID not found for this accountant.");
            return;
        }

        String sellerId = userDoc.getString("parent_seller_id");

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // clear table first

        for (Document doc : financials.find(new Document("status", "Pending").append("seller_id", sellerId))) {
            model.addRow(new Object[]{
                doc.getObjectId("_id"),
                doc.getString("order_id"),
                doc.getString("distance"),
                doc.get("invoice_amount"),
                doc.getString("parcel_size"),
                doc.getString("parcel_weight"),
                doc.getString("payment_mode") != null ? doc.getString("payment_mode") : "Cash",
                doc.getString("status")
            });
        }

        // Set dropdowns
        JComboBox<String> paymentCombo = new JComboBox<>(new String[]{"Cash", "Card", "Cheque"});
        jTable1.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(paymentCombo));

        JComboBox<String> statusCombo = new JComboBox<>(new String[]{"Pending", "Paid"});
        jTable1.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(statusCombo));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
